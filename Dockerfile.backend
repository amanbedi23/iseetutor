# Multi-stage build for optimal image size
FROM python:3.10-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements-cloud.txt .

# Install Python dependencies
RUN pip install --user --no-cache-dir -r requirements-cloud.txt

# Final stage
FROM python:3.10-slim

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 iseetutor

# Copy Python dependencies from builder
COPY --from=builder /root/.local /home/iseetutor/.local

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=iseetutor:iseetutor src/ ./src/
COPY --chown=iseetutor:iseetutor alembic.ini ./
COPY --chown=iseetutor:iseetutor alembic/ ./alembic/

# Create necessary directories
RUN mkdir -p /app/logs /app/temp && \
    chown -R iseetutor:iseetutor /app/logs /app/temp

# Switch to non-root user
USER iseetutor

# Add .local/bin to PATH
ENV PATH=/home/iseetutor/.local/bin:$PATH

# Environment variables (will be overridden by docker-compose)
ENV PYTHONUNBUFFERED=1
ENV APP_ENV=production
ENV APP_PORT=8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]